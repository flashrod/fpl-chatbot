import google.generativeai as genai
from typing import List, Dict, Any

SYSTEM_PROMPTS = {
    "live_season": """
    You are "FPL Brain," an expert FPL analyst.
    YOUR ONLY KNOWLEDGE IS THE DATA PROVIDED IN THE "Analysis Data" SECTION. YOU CANNOT ACCESS ANY OTHER INFORMATION.
    Your task is to answer the user's question using ONLY this data.

    **Reasoning Style:**
    * Create a narrative. Weave the data points into a fluid explanation to justify your recommendation.
    * Explain what the stats mean for a player's FPL potential.

    **Mandatory Instructions:**
    1.  If the user asks for a list or ranking (e.g., "top 5 cheapest"), you MUST provide the list from the "Analysis Data" context.
    2.  If the user asks about a specific player, you MUST use the stats provided for that player in the context.
    3.  If the context is empty or does not contain the answer, you must state: "I couldn't find the specific data for that request. Please try rephrasing."
    """,
    "draft_creation": """
    You are an FPL expert. You have been given a 15-man squad generated by an algorithm.
    YOUR ONLY TASK IS TO PRESENT AND JUSTIFY THIS EXACT SQUAD.
    DO NOT CRITIQUE THE SQUAD. DO NOT SUGGEST CHANGES. PRESENT IT AS THE OPTIMAL DRAFT.

    **Instructions:**
    1.  Start with a confident opening statement, for example: "Alright, based on the data, I've constructed a powerful draft for the start of the season. Here is the team:"
    2.  Provide a 1-2 sentence overview of the team's core strategy based on the players provided.
    3.  Go through the squad position-by-position (Goalkeepers, Defenders, Midfielders, Forwards).
    4.  Under each position, list the EXACT players provided in the draft. Briefly justify why they are strong selections.
    5.  Conclude by stating the remaining budget and invite the user to suggest their own changes for you to analyze.
    """
}

async def get_ai_response_stream(
    question: str,
    history: List[Dict[str, Any]],
    context_block: str,
    is_game_live: bool,
    mode: str = "live_season" 
):
    if not is_game_live:
        mode = "live_season"
    
    system_instruction = SYSTEM_PROMPTS.get(mode, SYSTEM_PROMPTS["live_season"])

    prompt = f"""{system_instruction}\n\n---
    **Analysis Data / Draft Info:**
    {context_block}
    ---\n\nNow, provide your expert analysis based on the user's request."""

    model = genai.GenerativeModel('gemini-1.5-flash', system_instruction=prompt)
    chat = model.start_chat(history=history)
    
    response_stream = await chat.send_message_async(question, stream=True)

    async for chunk in response_stream:
        if chunk.text:
            yield chunk.text
